import io
import uuid
import qrcode
from django.core.mail import EmailMultiAlternatives
from django.template.loader import render_to_string
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader
import logging
from django.urls import reverse
from reportlab.pdfgen import canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from django.conf import settings
import os
from PIL import Image
from .models import BotAccessToken

logger = logging.getLogger(__name__)

# –®–ª—è—Ö –¥–æ —à—Ä–∏—Ñ—Ç—É –≤ static
font_path = os.path.join(settings.BASE_DIR, "static", "fonts", "DejaVuSans.ttf")
bold_font_path = os.path.join(settings.BASE_DIR, "static", "fonts", "DejaVuSans-Bold.ttf")

# –†–µ—î—Å—Ç—Ä—É—î–º–æ —à—Ä–∏—Ñ—Ç–∏
pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))
pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', bold_font_path))

FONT_NORMAL = 'DejaVuSans'
FONT_BOLD = 'DejaVuSans-Bold'


def generate_ticket_qr(order):
    """–ì–µ–Ω–µ—Ä—É—î QR-–∫–æ–¥ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–≤–∏—Ç–∫–∞"""
    # –ì–µ–Ω–µ—Ä—É—î–º–æ URL –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É verify_ticket –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º order_reference
    verification_path = reverse('verify_ticket', args=[order.id])
    verification_url = f"{settings.SITE_URL}{verification_path}"

    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_H,
        box_size=10,
        border=2,
    )
    qr.add_data(verification_url)  # —Ç—É—Ç —Å–∞–º–µ URL
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    return img


def generate_ticket_pdf(order, qr_img):
    """–ì–µ–Ω–µ—Ä—É—î PDF –∑ QR-–∫–æ–¥–æ–º –Ω–∞ –≥–æ—Ç–æ–≤–æ–º—É —à–∞–±–ª–æ–Ω—ñ"""

    # –®–ª—è—Ö –¥–æ —à–∞–±–ª–æ–Ω—É
    template_path = 'static/images/grand_opening_party_ticket.png'

    if not os.path.exists(template_path):
        logger.error(f"Template not found: {template_path}")
        raise FileNotFoundError(f"Ticket template not found at {template_path}")

    # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —à–∞–±–ª–æ–Ω
    template_img = Image.open(template_path)
    template_width, template_height = template_img.size

    # –°—Ç–≤–æ—Ä—é—î–º–æ –±—ñ–ª–∏–π —Ñ–æ–Ω —è–∫—â–æ —à–∞–±–ª–æ–Ω –º–∞—î –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å
    if template_img.mode in ('RGBA', 'LA') or (template_img.mode == 'P' and 'transparency' in template_img.info):
        white_bg = Image.new('RGB', (template_width, template_height), 'white')
        if template_img.mode != 'RGBA':
            template_img = template_img.convert('RGBA')
        white_bg.paste(template_img, (0, 0), template_img)
        template_img = white_bg
    else:
        template_img = template_img.convert('RGB')

    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ QR –≤ PIL Image
    qr_pil = qr_img.convert('RGBA')

    # –†–æ–∑–º—ñ—Ä QR-–∫–æ–¥—É
    qr_size = int(template_height * 0.15)
    qr_pil = qr_pil.resize((qr_size, qr_size), Image.Resampling.LANCZOS)

    # –ü–æ–∑–∏—Ü—ñ—è QR-–∫–æ–¥—É (—Ü–µ–Ω—Ç—Ä QR)
    qr_center_x = int(template_width * 0.82)
    qr_center_y = int(template_height * 0.20)

    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–µ—Ä—Ö–Ω—ñ–π –ª—ñ–≤–∏–π –∫—É—Ç
    qr_x = qr_center_x - (qr_size // 2)
    qr_y = qr_center_y - (qr_size // 2)

    # –ù–∞–∫–ª–∞–¥–∞—î–º–æ QR –Ω–∞ —à–∞–±–ª–æ–Ω
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ template –º–∞—î alpha –∫–∞–Ω–∞–ª
    if template_img.mode != 'RGBA':
        template_img = template_img.convert('RGBA')

    template_img.paste(qr_pil, (qr_x, qr_y), qr_pil)

    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ RGB –¥–ª—è PDF (–±–µ–∑ –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ)
    if template_img.mode == 'RGBA':
        white_bg = Image.new('RGB', template_img.size, 'white')
        white_bg.paste(template_img, (0, 0), template_img)
        template_img = white_bg
    else:
        template_img = template_img.convert('RGB')

    # –°—Ç–≤–æ—Ä—é—î–º–æ PDF
    pdf_buffer = io.BytesIO()
    c = canvas.Canvas(pdf_buffer, pagesize=A4)
    width, height = A4

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –±—É—Ñ–µ—Ä
    img_buffer = io.BytesIO()
    template_img.save(img_buffer, format='PNG')
    img_buffer.seek(0)
    img_reader = ImageReader(img_buffer)

    # –í—Å—Ç–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ —Ü–µ–Ω—Ç—Ä—É A4 –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏
    margin = 50
    pdf_width = width - 2 * margin
    pdf_height = height - 2 * margin

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
    aspect_ratio = template_width / template_height

    if pdf_width / aspect_ratio <= pdf_height:
        # –ü—ñ–¥–≥–∞–Ω—è—î–º–æ –ø–æ —à–∏—Ä–∏–Ω—ñ
        final_width = pdf_width
        final_height = pdf_width / aspect_ratio
    else:
        # –ü—ñ–¥–≥–∞–Ω—è—î–º–æ –ø–æ –≤–∏—Å–æ—Ç—ñ
        final_height = pdf_height
        final_width = pdf_height * aspect_ratio

    x = (width - final_width) / 2
    y = (height - final_height) / 2

    # –í—Å—Ç–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ PDF
    c.drawImage(img_reader, x, y, width=final_width, height=final_height)

    c.showPage()
    c.save()
    pdf_buffer.seek(0)

    return pdf_buffer


def send_ticket_email_with_pdf(order, funnel_tag="night-29-11"):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –∑ PDF —ñ QR + –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Telegram-–±–æ—Ç–∞"""
    # === 1. –ì–µ–Ω–µ—Ä—É—î–º–æ QR –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ===
    qr_img = generate_ticket_qr(order)

    # === 2. –ì–µ–Ω–µ—Ä—É—î–º–æ PDF –∑ QR ===
    pdf_buffer = generate_ticket_pdf(order, qr_img)

    # === 3. –§–æ—Ä–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –±–æ—Ç ===
    if order.keycrm_lead_id:
        # --- –ì–µ–Ω–µ—Ä—É—î–º–æ –∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω ---
        token_obj, _ = BotAccessToken.objects.get_or_create(
            order=order,
            funnel_tag=funnel_tag,
            defaults={"token": uuid.uuid4().hex[:12]}
        )
        bot_url = f"https://t.me/Pasue_club_bot?start={token_obj.token}"
    else:
        bot_url = "https://t.me/Pasue_club_bot"

    # === 4. –§–æ—Ä–º—É—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç –ª–∏—Å—Ç–∞ ===
    html_content = render_to_string('emails/ticket.html', {
        'order': order,
        'bot_url': bot_url
    })

    # Plain text
    text_content = f"–í–∞—à –∫–≤–∏—Ç–æ–∫ –Ω–∞ {order.event_name}\n–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order.id}"

    # === 5. –§–æ—Ä–º—É—î–º–æ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ª–∏—Å—Ç ===
    email = EmailMultiAlternatives(
        subject='–í—ñ—Ç–∞—î–º–æ —É PASUE Club - –¢–≤—ñ–π –∫–≤–∏—Ç–æ–∫ –Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–∏–π –≤–µ—á—ñ—Ä',
        body=text_content,
        from_email=settings.DEFAULT_FROM_EMAIL,
        to=[order.email]
    )

    email.attach_alternative(html_content, "text/html")
    email.attach(f'ticket_{order.id}.pdf', pdf_buffer.read(), 'application/pdf')
    email.send(fail_silently=False)

    logger.info(f"üì© Email –∑ PDF, QR —ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –±–æ—Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")