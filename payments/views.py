from django.http import HttpResponse, JsonResponse
from django.views.decorators.http import require_http_methods
from django.conf import settings
from django.views.decorators.csrf import csrf_exempt
from django.utils import timezone
from datetime import timedelta
import hmac
import time
import hashlib
import json
from .keycrm_api import KeyCRMAPI
from .forms import TicketOrderForm
import logging
from django.shortcuts import render
from .models import TicketOrder
from .ticket_utils import send_ticket_email_with_pdf


logger = logging.getLogger(__name__)


def is_staff(user):
    return user.is_staff


def index(request):
    return render(request, 'index.html')


def mobile(request):
    return render(request, 'mobile.html')


def generate_wayforpay_params(order):
    merchant_account = settings.WAYFORPAY_MERCHANT_ACCOUNT
    merchant_domain = settings.WAYFORPAY_DOMAIN.rstrip('/')
    secret_key = settings.WAYFORPAY_SECRET_KEY

    # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π orderReference
    order_reference = f"ORDER_{order.id}_{int(time.time())}"
    order.wayforpay_order_reference = order_reference
    order.save()

    # --- –î–∞–Ω—ñ –¥–ª—è –ø–ª–∞—Ç–µ–∂—É ---
    amount = float(order.amount)
    params = {
        "merchantAccount": merchant_account,
        "merchantDomainName": merchant_domain,
        "orderReference": order_reference,
        "orderDate": str(int(time.time())),
        "amount": f"{amount:.2f}",
        "currency": "UAH",
        "productName[]": ["PASUE Club - Grand Opening Party Ticket"],
        "productCount[]": ["1"],
        "productPrice[]": [f"{amount:.2f}"],
        "clientFirstName": order.name,
        "clientEmail": order.email,
        "clientPhone": order.phone,
        "language": "uk",  # UA, EN, AUTO
        "returnUrl": f"{settings.WAYFORPAY_RETURN_URL}?orderReference={order_reference}",
        "serviceUrl": settings.WAYFORPAY_SERVICE_URL,
    }

    # --- –§–æ—Ä–º—É—î–º–æ –ø—ñ–¥–ø–∏—Å ---
    signature_string = ";".join([
        params["merchantAccount"],
        params["merchantDomainName"],
        params["orderReference"],
        params["orderDate"],
        params["amount"],
        params["currency"],
        *params["productName[]"],
        *params["productCount[]"],
        *params["productPrice[]"],
    ])

    merchant_signature = hmac.new(
        secret_key.encode('utf-8'),
        signature_string.encode('utf-8'),
        hashlib.md5
    ).hexdigest()

    params["merchantSignature"] = merchant_signature

    return params


def build_keycrm_lead(order, status="not_paid", comment=""):
    return {
        "title": f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.id}",
        "pipeline_id": settings.KEYCRM_PIPELINE_ID,
        "source_id": settings.KEYCRM_SOURCE_ID,
        "contact": {
            "full_name": order.name,
            "email": order.email,
            "phone": order.phone
        },
        "payments": [
            {
                "payment_method": "WayForPay",
                "amount": float(order.amount),
                "status": status  # "not_paid", "paid", "declined"
            }
        ],
        "manager_comment": comment or f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: {status}",
        "custom_fields": [
            {
                "uuid": "device_type",
                "value": order.device_type
            },
            {
                "uuid": "order_id",
                "value": str(order.id)
            }
        ]
    }


@csrf_exempt
def submit_ticket_form(request):
    utm_source = request.POST.get("utm_source") or request.COOKIES.get("utm_source", "")
    utm_medium = request.POST.get("utm_medium") or request.COOKIES.get("utm_medium", "")
    utm_campaign = request.POST.get("utm_campaign") or request.COOKIES.get("utm_campaign", "")
    utm_term = request.POST.get("utm_term") or request.COOKIES.get("utm_term", "")
    utm_content = request.POST.get("utm_content") or request.COOKIES.get("utm_content", "")
    
    if request.method == "POST":
        form = TicketOrderForm(request.POST)

        if form.is_valid():
            name = form.cleaned_data['name']
            email = form.cleaned_data["email"]
            phone = form.cleaned_data["phone"]

            ua_string = request.META.get("HTTP_USER_AGENT", "").lower()
            device_type = "mobile" if "mobi" in ua_string else "desktop"

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            order = TicketOrder.objects.create(
                name=name,
                email=email,
                phone=phone,
                payment_status="pending",
                amount=1.00,
                device_type=device_type,
            )

            logger.info(f"üìù –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")

            # –°—Ç–≤–æ—Ä—é—î–º–æ –ª—ñ–¥ –≤ KeyCRM –∑ –ø–ª–∞—Ç–µ–∂–µ–º –≤ –º–∞—Å–∏–≤—ñ
            if settings.KEYCRM_API_TOKEN and settings.KEYCRM_PIPELINE_ID and settings.KEYCRM_SOURCE_ID:
                try:
                    keycrm = KeyCRMAPI()

                    lead_data = {
                        "title": f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}",
                        "pipeline_id": settings.KEYCRM_PIPELINE_ID,
                        "source_id": settings.KEYCRM_SOURCE_ID,
                        "manager_comment": "–õ–µ–Ω–¥—ñ–Ω–≥: Grand Opening Party",
                        "contact": {
                            "full_name": name,
                            "email": email,
                            "phone": phone
                        },
                        "utm_source": utm_source,
                        "utm_medium": utm_medium,
                        "utm_campaign": utm_campaign,
                        "utm_term": utm_term,
                        "utm_content": utm_content,
                        "products": [
                            {
                                "sku": f"ticket-{order.id}",
                                "price": float(order.amount),
                                "quantity": 1,
                                "unit_type": "—à—Ç",
                                "name": "–ö–≤–∏—Ç–æ–∫ –Ω–∞ Grand Opening Party",
                            }
                        ],
                        "payments": [
                            {
                                "payment_method": "WayForPay",
                                "amount": float(order.amount),
                                "description": "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–∏",
                                "status": "not_paid"
                            }
                        ],
                        "custom_fields": [
                            {"uuid": "device_type", "value": device_type},
                            {"uuid": "order_id", "value": str(order.id)}
                        ]
                    }

                    logger.info(f"üîÑ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –≤ KeyCRM –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")
                    lead = keycrm.create_pipeline_card(lead_data)

                    if lead and lead.get('id'):
                        order.keycrm_lead_id = lead['id']
                        
                        # –ë–µ—Ä–µ–º–æ contact_id –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                        lead_response = lead.get('response', {})
                        if lead_response.get('contact_id'):
                            order.keycrm_contact_id = lead_response['contact_id']
                        
                        # –ë–µ—Ä–µ–º–æ –ø–ª–∞—Ç–µ–∂—ñ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ª—ñ–¥–∞
                        payments = lead_response.get('payments', [])
                        
                        logger.info(f"üîç –í –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ª—ñ–¥–∞ –∑–Ω–∞–π–¥–µ–Ω–æ {len(payments)} –ø–ª–∞—Ç–µ–∂—ñ–≤")
                        
                        if payments and len(payments) > 0:
                            order.keycrm_payment_id = payments[0].get('id')
                            logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ payment_id –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {order.keycrm_payment_id}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ª—ñ–¥–∞")
                        
                        order.save()
                        logger.info(f"‚úÖ –õ—ñ–¥ {lead['id']} —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order.id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ª—ñ–¥ –≤ KeyCRM –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order.id}")
                        logger.warning(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å KeyCRM: {lead}")

                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ª—ñ–¥–∞ –≤ KeyCRM: {str(e)}")

            # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏
            params = generate_wayforpay_params(order)
            return JsonResponse({"success": True, "wayforpay_params": params})

        else:
            return JsonResponse({
                "success": False,
                "errors": form.errors
            }, status=400)

    return JsonResponse({"success": False}, status=405)


# @csrf_exempt
# @require_http_methods(["POST"])
# def wayforpay_callback(request):
#     """Webhook –≤—ñ–¥ WayForPay"""
#     try:
#         data = json.loads(request.body.decode("utf-8"))
#         logger.info("=== CALLBACK DATA ===")
#         logger.info(json.dumps(data, indent=2, ensure_ascii=False))
#         logger.info("=== END CALLBACK DATA ===")
#
#         order_reference = data.get("orderReference")
#         transaction_status = data.get("transactionStatus")
#         merchant_signature = data.get("merchantSignature")
#
#         if not order_reference:
#             return HttpResponse("Missing orderReference", status=400)
#
#         try:
#             order = TicketOrder.objects.get(wayforpay_order_reference=order_reference)
#             logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}, KeyCRM lead id: {order.keycrm_lead_id}")
#         except TicketOrder.DoesNotExist:
#             logger.info(f"Order not found: {order_reference}")
#             return HttpResponse("Order not found", status=404)
#
#         # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∏–π callback
#         if order.callback_processed and order.payment_status == "success":
#             logger.info(f"‚ÑπÔ∏è Callback –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")
#             status = "accept"
#             ts = int(time.time())
#             sig_source = f"{order_reference};{status};{settings.WAYFORPAY_SECRET_KEY}"
#             response_signature = hmac.new(
#                 settings.WAYFORPAY_SECRET_KEY.encode("utf-8"),
#                 sig_source.encode("utf-8"),
#                 hashlib.md5
#             ).hexdigest()
#             return JsonResponse({
#                 "orderReference": order_reference,
#                 "status": status,
#                 "time": ts,
#                 "signature": response_signature
#             })
#
#         # –§–æ—Ä–º—É—î–º–æ –ø—ñ–¥–ø–∏—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
#         signature_fields = [
#             data.get("merchantAccount", ""),
#             data.get("orderReference", ""),
#             str(data.get("amount", "")),
#             data.get("currency", ""),
#             str(data.get("authCode", "")),
#             data.get("cardPan", ""),
#             str(data.get("transactionStatus", "")),
#             str(data.get("reasonCode", "")),
#         ]
#         signature_string = ";".join(signature_fields)
#         expected_signature = hmac.new(
#             settings.WAYFORPAY_SECRET_KEY.encode("utf-8"),
#             signature_string.encode("utf-8"),
#             hashlib.md5
#         ).hexdigest()
#
#         logger.info("=== CALLBACK SIGNATURE DEBUG ===")
#         logger.info(f"Expected signature: {expected_signature}")
#         logger.info(f"Received signature: {merchant_signature}")
#
#         if expected_signature != merchant_signature:
#             logger.error("=== SIGNATURE MISMATCH ===")
#             return HttpResponse("Invalid signature", status=403)
#
#         logger.info("=== SIGNATURE VALID ===")
#
#         # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
#         if transaction_status == "Approved":
#             order.payment_status = "success"
#             order.callback_processed = True
#             order.name = data.get("clientFirstName", order.name)
#             order.email = data.get("clientEmail", order.email)
#             order.phone = data.get("clientPhone", order.phone)
#             order.save()
#
#             logger.info(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –æ–ø–ª–∞—á–µ–Ω–µ")
#
#             # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email
#             if order.email_status != "sent":
#                 try:
#                     send_ticket_email_with_pdf(order)
#                     order.email_status = "sent"
#                     order.save(update_fields=["email_status"])
#                     logger.info(f"üìß Email –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")
#                 except Exception as e:
#                     logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}: {e}")
#             else:
#                 logger.info(f"‚ÑπÔ∏è Email –≤–∂–µ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")
#
#             # === KeyCRM –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ===
#             if order.keycrm_payment_id and settings.KEYCRM_API_TOKEN:
#                 try:
#                     keycrm = KeyCRMAPI()
#
#                     # 1Ô∏è‚É£ –°–ø–æ—á–∞—Ç–∫—É –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É –Ω–∞ "paid"
#                     payment_description = f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.wayforpay_order_reference}. –ö–ª—ñ—î–Ω—Ç: {order.name}, {order.phone}, {order.email}"
#
#                     logger.info(f"üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É {order.keycrm_payment_id} –Ω–∞ 'paid'")
#                     payment_update_result = keycrm.update_payment_status(
#                         payment_id=order.keycrm_payment_id,
#                         status="paid",
#                         description=payment_description
#                     )
#
#                     if payment_update_result:
#                         logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É {order.keycrm_payment_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 'paid'")
#
#                         # 2Ô∏è‚É£ –ü—Ä–∏–≤'—è–∑—É—î–º–æ –∑–æ–≤–Ω—ñ—à–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑–∞ UUID
#                         logger.info(f"üîÑ –ü—Ä–∏–≤'—è–∑—É—î–º–æ –∑–æ–≤–Ω—ñ—à–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é {order.wayforpay_order_reference}")
#                         transaction_result = keycrm.attach_external_transaction(
#                             payment_id=order.keycrm_payment_id,
#                             transaction_uuid=order.wayforpay_order_reference
#                         )
#
#                         if transaction_result:
#                             logger.info(f"‚úÖ –ó–æ–≤–Ω—ñ—à–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –ø—Ä–∏–≤'—è–∑–∞–Ω–∞ –¥–æ –ø–ª–∞—Ç–µ–∂—É {order.keycrm_payment_id}")
#                         else:
#                             # –Ø–∫—â–æ –ø—Ä–∏–≤'—è–∑–∫–∞ –ø–æ UUID –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞, –º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ —Å–ø–∏—Å–∫—É
#                             logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑–∞ UUID")
#                             logger.info(f"üîÑ –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ —Å–ø–∏—Å–∫—É –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
#
#                             # –®—É–∫–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –ø–æ orderReference —É description
#                             transactions = keycrm.get_external_transactions(
#                                 description=order.wayforpay_order_reference
#                             )
#
#                             if transactions and transactions.get('data'):
#                                 transaction_list = transactions['data']
#                                 if len(transaction_list) > 0:
#                                     transaction_id = transaction_list[0].get('id')
#                                     logger.info(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é ID: {transaction_id}")
#
#                                     # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –∑–∞ ID
#                                     attach_result = keycrm.attach_external_transaction_by_id(
#                                         payment_id=order.keycrm_payment_id,
#                                         transaction_id=transaction_id
#                                     )
#
#                                     if attach_result:
#                                         logger.info(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é {transaction_id} –ø—Ä–∏–≤'—è–∑–∞–Ω–æ –¥–æ –ø–ª–∞—Ç–µ–∂—É")
#                                     else:
#                                         logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑–∞ ID")
#                                 else:
#                                     logger.warning(f"‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É")
#                             else:
#                                 logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
#                     else:
#                         logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É {order.keycrm_payment_id}")
#
#                 except Exception as e:
#                     logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ KeyCRM: {e}")
#                     import traceback
#                     logger.error(f"Traceback: {traceback.format_exc()}")
#             else:
#                 if not order.keycrm_payment_id:
#                     logger.warning(f"‚ö†Ô∏è KeyCRM payment_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")
#                 if not settings.KEYCRM_API_TOKEN:
#                     logger.warning(f"‚ö†Ô∏è KEYCRM_API_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
#
#         elif transaction_status == "Declined":
#             order.payment_status = "failed"
#             order.callback_processed = True
#             order.save()
#             logger.info(f"‚ùå –û–ø–ª–∞—Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")
#
#             # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É –≤ KeyCRM –Ω–∞ "declined"
#             if order.keycrm_payment_id and settings.KEYCRM_API_TOKEN:
#                 try:
#                     keycrm = KeyCRMAPI()
#                     keycrm.update_payment_status(
#                         payment_id=order.keycrm_payment_id,
#                         status="declined",
#                         description=f"–û–ø–ª–∞—Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {data.get('reasonCode', 'Unknown')}"
#                     )
#                 except Exception as e:
#                     logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É: {e}")
#
#         else:
#             order.payment_status = "failed"
#             order.callback_processed = True
#             order.save()
#             logger.info(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {transaction_status}")
#
#         # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è WayForPay
#         status = "accept"
#         ts = int(time.time())
#         sig_source = f"{order_reference};{status};{settings.WAYFORPAY_SECRET_KEY}"
#
#         response_signature = hmac.new(
#             settings.WAYFORPAY_SECRET_KEY.encode("utf-8"),
#             sig_source.encode("utf-8"),
#             hashlib.md5
#         ).hexdigest()
#
#         response_data = {
#             "orderReference": order_reference,
#             "status": status,
#             "time": ts,
#             "signature": response_signature,
#         }
#
#         return JsonResponse(response_data, status=200)
#
#     except Exception as e:
#         logger.error(f"‚ùå Callback error: {str(e)}")
#         import traceback
#         logger.error(f"Traceback: {traceback.format_exc()}")
#         return HttpResponse(f"Error: {str(e)}", status=400)
@csrf_exempt
@require_http_methods(["POST"])
def wayforpay_callback(request):
    """Webhook –≤—ñ–¥ WayForPay"""
    try:
        data = json.loads(request.body.decode("utf-8"))
        logger.info("=== CALLBACK DATA ===")
        logger.info(json.dumps(data, indent=2, ensure_ascii=False))
        logger.info("=== END CALLBACK DATA ===")

        order_reference = data.get("orderReference")
        transaction_status = data.get("transactionStatus")
        merchant_signature = data.get("merchantSignature")

        if not order_reference:
            return HttpResponse("Missing orderReference", status=400)

        try:
            order = TicketOrder.objects.get(wayforpay_order_reference=order_reference)
            logger.info(
                f"–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}, KeyCRM lead id: {order.keycrm_lead_id}, payment id: {order.keycrm_payment_id}")
        except TicketOrder.DoesNotExist:
            logger.info(f"Order not found: {order_reference}")
            return HttpResponse("Order not found", status=404)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∏–π callback
        if order.callback_processed and order.payment_status == "success":
            logger.info(f"‚ÑπÔ∏è Callback –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")
            status = "accept"
            ts = int(time.time())
            sig_source = f"{order_reference};{status};{settings.WAYFORPAY_SECRET_KEY}"
            response_signature = hmac.new(
                settings.WAYFORPAY_SECRET_KEY.encode("utf-8"),
                sig_source.encode("utf-8"),
                hashlib.md5
            ).hexdigest()
            return JsonResponse({
                "orderReference": order_reference,
                "status": status,
                "time": ts,
                "signature": response_signature
            })

        # –§–æ—Ä–º—É—î–º–æ –ø—ñ–¥–ø–∏—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        signature_fields = [
            data.get("merchantAccount", ""),
            data.get("orderReference", ""),
            str(data.get("amount", "")),
            data.get("currency", ""),
            str(data.get("authCode", "")),
            data.get("cardPan", ""),
            str(data.get("transactionStatus", "")),
            str(data.get("reasonCode", "")),
        ]
        signature_string = ";".join(signature_fields)
        expected_signature = hmac.new(
            settings.WAYFORPAY_SECRET_KEY.encode("utf-8"),
            signature_string.encode("utf-8"),
            hashlib.md5
        ).hexdigest()

        logger.info("=== CALLBACK SIGNATURE DEBUG ===")
        logger.info(f"Expected signature: {expected_signature}")
        logger.info(f"Received signature: {merchant_signature}")

        if expected_signature != merchant_signature:
            logger.error("=== SIGNATURE MISMATCH ===")
            return HttpResponse("Invalid signature", status=403)

        logger.info("=== SIGNATURE VALID ===")

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        if transaction_status == "Approved":
            order.payment_status = "success"
            order.callback_processed = True
            order.name = data.get("clientFirstName", order.name)
            order.email = data.get("clientEmail", order.email)
            order.phone = data.get("clientPhone", order.phone)
            order.save()

            logger.info(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –æ–ø–ª–∞—á–µ–Ω–µ")

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email
            if order.email_status != "sent":
                try:
                    send_ticket_email_with_pdf(order)
                    order.email_status = "sent"
                    order.save(update_fields=["email_status"])
                    logger.info(f"üìß Email –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}: {e}")
            else:
                logger.info(f"‚ÑπÔ∏è Email –≤–∂–µ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")

            # === KeyCRM –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–ü–†–ê–í–ò–õ–¨–ù–ò–ô –§–õ–û–£ –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é) ===
            if order.keycrm_lead_id and order.keycrm_payment_id and settings.KEYCRM_API_TOKEN:
                try:
                    keycrm = KeyCRMAPI()

                    logger.info(f"üìã –î–∞–Ω—ñ –∑ WayForPay callback:")
                    logger.info(f"   - orderReference: {data.get('orderReference')}")
                    logger.info(f"   - authCode: {data.get('authCode')}")
                    logger.info(f"   - amount: {data.get('amount')}")
                    logger.info(f"   - processingDate: {data.get('processingDate')}")
                    logger.info(f"   - order.id: {order.id}")

                    transaction_attached = False

                    # –°–¢–†–ê–¢–ï–ì–Ü–Ø: –ü–æ—à—É–∫ —É —Å–ø–∏—Å–∫—É –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ retry
                    # –ü—Ä–∏—á–∏–Ω–∞: KeyCRM –ø–æ—Ç—Ä—ñ–±–µ–Ω —á–∞—Å, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤—ñ–¥ WayForPay
                    logger.info(f"üîÑ –ü–æ—à—É–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ —Å–ø–∏—Å–∫—É –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")

                    # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
                    max_attempts = 3
                    wait_seconds = [2, 5, 10]  # –ó–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏

                    callback_amount = float(data.get('amount', 0))
                    callback_auth_code = data.get('authCode', '')
                    callback_processing_date = data.get('processingDate', 0)

                    for attempt in range(max_attempts):
                        if transaction_attached:
                            break

                        if attempt > 0:
                            wait_time = wait_seconds[attempt - 1]
                            logger.info(f"‚è≥ –ó–∞—á–µ–∫–∞—î–º–æ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ø—Ä–æ–±–æ—é #{attempt + 1}")
                            import time as time_module
                            time_module.sleep(wait_time)

                        logger.info(f"üîç –°–ø—Ä–æ–±–∞ #{attempt + 1}: –®—É–∫–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é")

                        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (–±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ)
                        transactions_result = keycrm.get_external_transactions(limit=100)

                        if transactions_result:
                            transaction_list = transactions_result.get('data', transactions_result) if isinstance(
                                transactions_result, dict) else transactions_result

                            if isinstance(transaction_list, list) and len(transaction_list) > 0:
                                logger.info(f"üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ {len(transaction_list)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")

                                # –®—É–∫–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑–∞ —Ç–æ—á–Ω–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—é
                                matching_transaction = None

                                for trans in transaction_list:
                                    trans_id = trans.get('id')
                                    trans_desc = trans.get('description', '')
                                    trans_amount = float(trans.get('amount', 0))
                                    trans_uuid = trans.get('uuid', '')
                                    trans_created = trans.get('created_at', '')

                                    # –ö—Ä–∏—Ç–µ—Ä—ñ—ó –¥–ª—è —Ç–æ—á–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ:
                                    # 1. –°—É–º–∞ —Å–ø—ñ–≤–ø–∞–¥–∞—î
                                    # 2. AuthCode –∞–±–æ orderReference –∑–≥–∞–¥—É—î—Ç—å—Å—è –≤ description –∞–±–æ uuid
                                    matches_amount = abs(trans_amount - callback_amount) < 0.01
                                    matches_auth_code = callback_auth_code and callback_auth_code in trans_desc
                                    matches_order_ref = order.wayforpay_order_reference in trans_desc or order.wayforpay_order_reference in trans_uuid
                                    matches_order_id = f"#{order.id}" in trans_desc or f"#{order.id} " in trans_desc

                                    logger.info(f"   üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó ID: {trans_id}")
                                    logger.info(f"      - Description: {trans_desc[:100]}")
                                    logger.info(f"      - Amount: {trans_amount} (–ø–æ—Ç—Ä—ñ–±–Ω–æ: {callback_amount})")
                                    logger.info(f"      - UUID: {trans_uuid}")
                                    logger.info(
                                        f"      - Matches: amount={matches_amount}, auth={matches_auth_code}, order_ref={matches_order_ref}, order_id={matches_order_id}")

                                    # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —Ç–æ—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å
                                    if matches_amount and (matches_auth_code or matches_order_ref):
                                        matching_transaction = trans
                                        logger.info(f"‚úÖ –ó–ù–ê–ô–î–ï–ù–û –í–Ü–î–ü–û–í–Ü–î–ù–£ –¢–†–ê–ù–ó–ê–ö–¶–Ü–Æ!")
                                        break

                                    # –Ø–∫—â–æ —î –ª–∏—à–µ –ø–æ order.id - —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à –Ω–∞–¥—ñ–π–Ω–æ
                                    elif matches_amount and matches_order_id and not matching_transaction:
                                        matching_transaction = trans
                                        logger.info(f"‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –º–æ–∂–ª–∏–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø–æ order.id (–º–µ–Ω—à –Ω–∞–¥—ñ–π–Ω–æ)")

                                if matching_transaction:
                                    transaction_id = matching_transaction.get('id')
                                    logger.info(f"üéØ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é ID: {transaction_id}")

                                    # –ü—Ä–∏–≤'—è–∑—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                                    attach_result = keycrm.attach_external_transaction_by_id(
                                        payment_id=order.keycrm_payment_id,
                                        transaction_id=transaction_id
                                    )

                                    if attach_result:
                                        logger.info(
                                            f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é {transaction_id} —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–≤'—è–∑–∞–Ω–æ –¥–æ –ø–ª–∞—Ç–µ–∂—É {order.keycrm_payment_id}")
                                        transaction_attached = True
                                        break
                                    else:
                                        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é {transaction_id}")
                                else:
                                    logger.warning(f"‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø—Ä–æ–±—ñ #{attempt + 1}")

                    # –Ø–∫—â–æ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–± —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—Ä—É—á–Ω—É
                    if not transaction_attached:
                        logger.warning(f"‚ö†Ô∏è –ó–æ–≤–Ω—ñ—à–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è {max_attempts} —Å–ø—Ä–æ–±")
                        logger.info(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–ª–∞—Ç–µ–∂—É –≤—Ä—É—á–Ω—É")

                        payment_description = f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.wayforpay_order_reference}. –ö–ª—ñ—î–Ω—Ç: {order.name}, {order.phone}, {order.email}. AuthCode: {callback_auth_code}"

                        manual_update = keycrm.update_lead_payment_status(
                            lead_id=order.keycrm_lead_id,
                            payment_id=order.keycrm_payment_id,
                            status="paid",
                            description=payment_description
                        )

                        if manual_update:
                            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É {order.keycrm_payment_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É –Ω–∞ 'paid'")
                        else:
                            logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É –≤—Ä—É—á–Ω—É")
                    else:
                        logger.info(f"üéâ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–≤'—è–∑–∞–Ω–æ! –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –≤ KeyCRM")

                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ KeyCRM: {e}")
                    import traceback
                    logger.error(f"Traceback: {traceback.format_exc()}")

            else:
                if not order.keycrm_payment_id:
                    logger.warning(f"‚ö†Ô∏è KeyCRM payment_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")
                if not settings.KEYCRM_API_TOKEN:
                    logger.warning(f"‚ö†Ô∏è KEYCRM_API_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")

        elif transaction_status == "Declined":
            order.payment_status = "failed"
            order.callback_processed = True
            order.save()
            logger.info(f"‚ùå –û–ø–ª–∞—Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")

        else:
            order.payment_status = "failed"
            order.callback_processed = True
            order.save()
            logger.info(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {transaction_status}")

        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è WayForPay
        status = "accept"
        ts = int(time.time())
        sig_source = f"{order_reference};{status};{settings.WAYFORPAY_SECRET_KEY}"

        response_signature = hmac.new(
            settings.WAYFORPAY_SECRET_KEY.encode("utf-8"),
            sig_source.encode("utf-8"),
            hashlib.md5
        ).hexdigest()

        response_data = {
            "orderReference": order_reference,
            "status": status,
            "time": ts,
            "signature": response_signature,
        }

        return JsonResponse(response_data, status=200)

    except Exception as e:
        logger.error(f"‚ùå Callback error: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return HttpResponse(f"Error: {str(e)}", status=400)


@csrf_exempt
@require_http_methods(["GET", "POST"])
def payment_result(request):
    order_reference = request.GET.get("orderReference")
    order = None
    status = "failed"

    if order_reference:
        try:
            order = TicketOrder.objects.get(wayforpay_order_reference=order_reference)
            status = "success" if order.payment_status == "success" else "failed"
        except TicketOrder.DoesNotExist:
            order = None
            status = "failed"

    template = "payment_success.html" if status == "success" else "payment_failed.html"
    return render(request, template, {"order": order})


def send_confirmation_email(order):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏"""
    try:
        send_ticket_email_with_pdf(order)
        order.email_status = 'sent'
        order.save(update_fields=["email_status"])
        logger.info(f"Email –∑ PDF –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order.id}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email: {str(e)}")
        order.email_status = 'failed'
        order.save(update_fields=["email_status"])


@require_http_methods(["GET"])
def keycrm_info(request):
    """
    –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –≤–æ—Ä–æ–Ω–∫–∏ —Ç–∞ –¥–∂–µ—Ä–µ–ª
    –í–∏–∫–ª–∏–∫–∞–π—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    """
    if not settings.KEYCRM_API_TOKEN:
        return JsonResponse({
            'error': 'KeyCRM API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π'
        }, status=400)

    keycrm = KeyCRMAPI()

    pipelines = keycrm.get_pipelines()
    sources = keycrm.get_sources()

    return JsonResponse({
        'pipelines': pipelines,
        'sources': sources
    })


@csrf_exempt
@require_http_methods(["GET"])
def validate_ticket_api(request, ticket_id):
    """API –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –∫–≤–∏—Ç–∫–∞"""
    try:
        ticket = TicketOrder.objects.get(id=ticket_id, payment_status='success')
        return JsonResponse({
            'success': True,
            'order_id': ticket.id,
            'event_name': ticket.event_name,
            'status': ticket.ticket_status,
            'is_valid': ticket.is_valid(),
            'scan_count': ticket.scan_count,
        })
    except TicketOrder.DoesNotExist:
        return JsonResponse({'success': False, 'error': '–ö–≤–∏—Ç–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}, status=404)


@csrf_exempt
@require_http_methods(["POST"])
def scan_ticket_api(request, ticket_id):
    """API –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–≤–∏—Ç–∫–∞ - –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Ç–∞ –∑–º—ñ–Ω—é—î —Å—Ç–∞—Ç—É—Å"""
    try:
        ticket = TicketOrder.objects.get(id=ticket_id, payment_status='success')

        body = json.loads(request.body) if request.body else {}
        scanned_by = body.get('scanned_by', 'scanner')

        was_valid = ticket.is_valid()
        previous_status = ticket.ticket_status

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        from .models import TicketScanLog
        TicketScanLog.objects.create(
            ticket=ticket,
            scanned_by=scanned_by,
            ip_address=request.META.get('REMOTE_ADDR'),
            was_valid=was_valid,
            previous_status=ticket.ticket_status
        )

        # –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –ü–Ü–î–¢–í–ï–†–î–ñ–£–Ñ–ú–û –ø—Ä–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—ñ —á–µ—Ä–µ–∑ —Å–∫–∞–Ω–µ—Ä
        if was_valid:
            # –í—ñ–¥–º—ñ—á–∞—î–º–æ —è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π
            ticket.mark_as_used(scanned_by=scanned_by)

            # –Ø–∫—â–æ —î –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ
            if hasattr(request, 'user') and request.user.is_authenticated:
                ticket.verify_ticket(request.user)
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î user, –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–º—ñ—á–∞—î–º–æ —è–∫ verified
                from django.utils import timezone
                ticket.is_verified = True
                ticket.verified_at = timezone.now()
                ticket.save()

            message = '‚úÖ –ö–≤–∏—Ç–æ–∫ –¥—ñ–π—Å–Ω–∏–π! –í—Ö—ñ–¥ –¥–æ–∑–≤–æ–ª–µ–Ω–æ.'
            status_type = 'valid'
        elif ticket.ticket_status == 'used':
            message = '‚ö†Ô∏è –ö–≤–∏—Ç–æ–∫ –≤–∂–µ –±—É–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π.'
            status_type = 'used'
        else:
            message = '‚ùå –ö–≤–∏—Ç–æ–∫ –Ω–µ–¥—ñ–π—Å–Ω–∏–π.'
            status_type = 'invalid'

        return JsonResponse({
            'success': True,
            'order_id': ticket.id,
            'event_name': ticket.event_name,
            'was_valid': was_valid,
            'status': ticket.ticket_status,
            'is_verified': ticket.is_verified,
            'scan_count': ticket.scan_count,
            'message': message,
            'status_type': status_type
        })
    except TicketOrder.DoesNotExist:
        return JsonResponse({
            'success': False,
            'error': '–ö–≤–∏—Ç–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
            'status_type': 'invalid'
        }, status=404)


def scanner_page(request):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞"""
    return render(request, 'scanner.html')


def verify_ticket_page(request, ticket_id):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–≤–∏—Ç–∫–∞ –ø–æ QR-–∫–æ–¥—É"""
    try:
        ticket = TicketOrder.objects.get(id=ticket_id, payment_status='success')

        context = {
            'ticket': ticket,
            'is_valid': ticket.is_valid(),
            'status_text': {
                'active': '–î—ñ–π—Å–Ω–∏–π',
                'used': '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π',
                'invalid': '–ù–µ–¥—ñ–π—Å–Ω–∏–π'
            }.get(ticket.ticket_status, '–ù–µ–≤—ñ–¥–æ–º–æ')
        }

        return render(request, 'verify_ticket.html', context)

    except TicketOrder.DoesNotExist:
        return render(request, 'verify_ticket.html', {
            'ticket': None,
            'error': '–ö–≤–∏—Ç–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
        })

