import requests
import logging
from django.conf import settings
from datetime import datetime

logger = logging.getLogger(__name__)


class KeyCRMAPI:
    """–ö–ª–∞—Å –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ KeyCRM API"""

    def __init__(self):
        self.api_token = settings.KEYCRM_API_TOKEN
        self.base_url = "https://openapi.keycrm.app/v1"
        self.headers = {
            "Authorization": f"Bearer {self.api_token}",
            "Content-Type": "application/json"
        }

    # ==========================================================
    # 1Ô∏è‚É£ –°–¢–í–û–†–ï–ù–ù–Ø –ö–ê–†–¢–ö–ò (–ª—ñ–¥ —É –≤–æ—Ä–æ–Ω—Ü—ñ)
    # ==========================================================
    def create_pipeline_card(self, data):
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ (–ª—ñ–¥) —É –≤–æ—Ä–æ–Ω—Ü—ñ KeyCRM.
        Docs: https://docs.keycrm.app/#/Pipelines/createNewPipelineCard
        """
        url = f"{self.base_url}/pipelines/cards"
        try:
            logger.info(f"‚û°Ô∏è –ù–∞–¥—Å–∏–ª–∞—é –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –≤ KeyCRM: {data}")
            response = requests.post(url, json=data, headers=self.headers, timeout=10)
            response.raise_for_status()

            result = response.json()
            card_id = result.get("id") or result.get("data", {}).get("id")
            logger.info(f"‚úÖ –õ—ñ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ (ID: {card_id}) | –í—ñ–¥–ø–æ–≤—ñ–¥—å: {result}")

            return {"id": card_id, "response": result}

        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–∞—Ä—Ç–∫–∏ –≤ KeyCRM: {e}")
            if hasattr(e, "response") and e.response is not None:
                logger.error(f"üîª –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            return None

    # ==========================================================
    # 2Ô∏è‚É£ –î–û–î–ê–í–ê–ù–ù–Ø –ó–û–í–ù–Ü–®–ù–¨–û–á –¢–†–ê–ù–ó–ê–ö–¶–Ü–á (–æ–ø–ª–∞—Ç–∏)
    # ==========================================================
    def create_external_transaction(self, data):
        """
        –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (–æ–ø–ª–∞—Ç–∏)
        Docs: https://help.keycrm.app/uk/process-automation-api-and-more/iak-pratsiuvati-z-oplatami-v-api
        """
        url = f"{self.base_url}/external/transactions"

        payload = {
            "external_id": data["external_id"],             # —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ WayForPay transactionId)
            "amount": data["amount"],                       # —Å—É–º–∞ –æ–ø–ª–∞—Ç–∏
            "status": data.get("status", "paid"),           # paid | declined | refund
            "payment_system": data.get("payment_system", "WayForPay"),
            "buyer_phone": data.get("buyer_phone"),
            "buyer_email": data.get("buyer_email"),
            "description": data.get("comment", ""),
            "date_paid": data.get("date_paid", datetime.utcnow().isoformat()),
            "card_title": data.get("card_title", "–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞"),
        }

        try:
            logger.info(f"‚û°Ô∏è –ù–∞–¥—Å–∏–ª–∞—é –∑–æ–≤–Ω—ñ—à–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–æ KeyCRM: {payload}")
            response = requests.post(url, json=payload, headers=self.headers, timeout=10)
            response.raise_for_status()

            result = response.json()
            logger.info(f"‚úÖ –ó–æ–≤–Ω—ñ—à–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ: {result}")
            return result

        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {str(e)}")
            if hasattr(e, "response") and e.response is not None:
                logger.error(f"üîª –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            return None

    # ==========================================================
    # 3Ô∏è‚É£ –î–û–î–ê–¢–ö–û–í–Ü –°–ï–†–í–Ü–°–ù–Ü –ú–ï–¢–û–î–ò
    # ==========================================================
    def get_pipelines(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–æ—Ä–æ–Ω–æ–∫"""
        url = f"{self.base_url}/pipelines"
        try:
            response = requests.get(url, headers=self.headers, timeout=10)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–æ—Ä–æ–Ω–æ–∫: {e}")
            return None

    def get_sources(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–∂–µ—Ä–µ–ª"""
        url = f"{self.base_url}/sources"
        try:
            response = requests.get(url, headers=self.headers, timeout=10)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∂–µ—Ä–µ–ª: {e}")
            return None