import requests
import logging
from django.conf import settings
from datetime import datetime

logger = logging.getLogger(__name__)


class KeyCRMAPI:
    """–ö–ª–∞—Å –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ KeyCRM API"""

    def __init__(self):
        self.api_token = settings.KEYCRM_API_TOKEN
        self.base_url = "https://openapi.keycrm.app/v1"
        self.headers = {
            "Authorization": f"Bearer {self.api_token}",
            "Content-Type": "application/json"
        }

    def create_pipeline_card(self, data):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ (–ª—ñ–¥) —É –≤–æ—Ä–æ–Ω—Ü—ñ KeyCRM."""
        url = f"{self.base_url}/pipelines/cards"
        try:
            logger.info(f"‚û°Ô∏è –ù–∞–¥—Å–∏–ª–∞—é –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –≤ KeyCRM: {data}")
            response = requests.post(url, json=data, headers=self.headers, timeout=10)
            response.raise_for_status()

            result = response.json()
            card_id = result.get("id") or result.get("data", {}).get("id")
            logger.info(f"‚úÖ –õ—ñ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ (ID: {card_id}) | –í—ñ–¥–ø–æ–≤—ñ–¥—å: {result}")

            return {"id": card_id, "response": result}

        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–∞—Ä—Ç–∫–∏ –≤ KeyCRM: {e}")
            if hasattr(e, "response") and e.response is not None:
                logger.error(f"üîª –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            return None

    def get_pipelines(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–æ—Ä–æ–Ω–æ–∫"""
        url = f"{self.base_url}/pipelines"
        try:
            response = requests.get(url, headers=self.headers, timeout=10)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–æ—Ä–æ–Ω–æ–∫: {e}")
            return None

    def get_sources(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–∂–µ—Ä–µ–ª"""
        url = f"{self.base_url}/sources"
        try:
            response = requests.get(url, headers=self.headers, timeout=10)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∂–µ—Ä–µ–ª: {e}")
            return None

    # def get_payments(self, lead_id):
    #     """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–ª–∞—Ç–µ–∂—ñ –¥–ª—è –ª—ñ–¥–∞"""
    #     url = f"{self.base_url}/pipelines/cards/{lead_id}"
    #     try:
    #         response = requests.get(url, headers=self.headers, timeout=10)
    #         response.raise_for_status()
    #         card_data = response.json().get("data", {})
    #         return card_data.get("payments", [])
    #     except requests.exceptions.RequestException as e:
    #         logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—ñ–≤: {e}")
    #         return []
    #
    # def create_payment(self, card_id, data):
    #     """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂ –¥–ª—è –∫–∞—Ä—Ç–∫–∏ (–ª—ñ–¥–∞)"""
    #     url = f"{self.base_url}/pipelines/cards/{card_id}/payment"
    #     try:
    #         response = requests.post(url, json=data, headers=self.headers, timeout=10)
    #         response.raise_for_status()
    #         result = response.json()
    #         logger.info(f"‚úÖ –ü–ª–∞—Ç—ñ–∂ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –∫–∞—Ä—Ç–∫–∏ {card_id}: {result}")
    #         return result
    #     except requests.exceptions.RequestException as e:
    #         logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É –¥–ª—è –∫–∞—Ä—Ç–∫–∏ {card_id}: {e}")
    #         if hasattr(e, "response") and e.response is not None:
    #             logger.error(f"üîª –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
    #         return None

    def update_payment_status(self, payment_id, status="paid", description=None):
        """
        –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É (PUT –∑–∞–ø–∏—Ç –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é KeyCRM)
        https://docs.keycrm.app/#/Payments/updatePayment
        """
        url = f"{self.base_url}/payments/{payment_id}"
        try:
            payload = {"status": status}
            if description:
                payload["description"] = description

            logger.info(f"üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É {payment_id} –Ω–∞ '{status}'")
            logger.info(f"üì§ Payload: {payload}")

            response = requests.put(url, headers=self.headers, json=payload, timeout=10)

            logger.info(f"üì° –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.status_code}")
            logger.info(f"üì° –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")

            response.raise_for_status()
            result = response.json()
            logger.info(f"‚úÖ –ü–ª–∞—Ç—ñ–∂ {payment_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å—Ç–∞—Ç—É—Å '{status}'")
            return result

        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É {payment_id}: {e}")
            if hasattr(e, "response") and e.response is not None:
                logger.error(f"üîª –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            return None

    def attach_external_transaction(self, payment_id, transaction_uuid):
        """
        –ü—Ä–∏–≤'—è–∑–∞—Ç–∏ –∑–æ–≤–Ω—ñ—à–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–æ –ø–ª–∞—Ç–µ–∂—É –∑–∞ UUID
        https://docs.keycrm.app/#/Payments/attachExternalTransactionToPayment

        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂—É –≤ KeyCRM
            transaction_uuid: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤—ñ–¥ –ø–ª–∞—Ç—ñ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
        """
        url = f"{self.base_url}/payments/{payment_id}/external-transactions"
        try:
            payload = {"transaction_uuid": transaction_uuid}

            logger.info(f"üîÑ –ü—Ä–∏–≤'—è–∑—É—î–º–æ –∑–æ–≤–Ω—ñ—à–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–æ –ø–ª–∞—Ç–µ–∂—É {payment_id}")
            logger.info(f"üì§ Transaction UUID: {transaction_uuid}")

            response = requests.post(url, headers=self.headers, json=payload, timeout=10)

            logger.info(f"üì° –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.status_code}")
            logger.info(f"üì° –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")

            response.raise_for_status()
            result = response.json()
            logger.info(f"‚úÖ –ó–æ–≤–Ω—ñ—à–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –ø—Ä–∏–≤'—è–∑–∞–Ω–æ –¥–æ –ø–ª–∞—Ç–µ–∂—É {payment_id}")
            return result

        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤'—è–∑—Ü—ñ –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {e}")
            if hasattr(e, "response") and e.response is not None:
                logger.error(f"üîª –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            return None

    def get_external_transactions(self, description=None, limit=50, offset=0):
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        https://docs.keycrm.app/#/Payments/getPaginatedListOfExternalTransactions

        Args:
            description: –§—ñ–ª—å—Ç—Ä –ø–æ –æ–ø–∏—Å—É (–Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –ü–Ü–ë —Ç–æ—â–æ)
            limit: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
            offset: –ó—Å—É–≤ –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        """
        url = f"{self.base_url}/payments/external-transactions"
        try:
            params = {"limit": limit, "offset": offset}
            if description:
                params["description"] = description

            logger.info(f"üîÑ –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
            response = requests.get(url, headers=self.headers, params=params, timeout=10)
            response.raise_for_status()

            result = response.json()
            logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(result.get('data', []))} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
            return result

        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {e}")
            if hasattr(e, "response") and e.response is not None:
                logger.error(f"üîª –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            return None

    # def create_payment_for_card(self, card_id, payment_data):
    #     """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂ –¥–ª—è –∫–∞—Ä—Ç–∫–∏ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª—ñ–¥–∞"""
    #     url = f"{self.base_url}/pipelines/cards/{card_id}/payments"
    #     try:
    #         response = requests.post(url, json=payment_data, headers=self.headers, timeout=10)
    #         response.raise_for_status()
    #         result = response.json()
    #         logger.info(f"‚úÖ –ü–ª–∞—Ç—ñ–∂ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –∫–∞—Ä—Ç–∫–∏ {card_id}: {result}")
    #         return result
    #     except requests.exceptions.RequestException as e:
    #         logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É: {e}")
    #         if hasattr(e, "response") and e.response is not None:
    #             logger.error(f"üîª –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
    #         return None
    #
    # def update_lead_payment_status(self, lead_id, payment_id, status="paid", description=None):
    #     """–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É —á–µ—Ä–µ–∑ API –ª—ñ–¥–∞"""
    #     url = f"{self.base_url}/pipelines/cards/{lead_id}/payments/{payment_id}"
    #     try:
    #         payload = {"status": status}
    #         if description:
    #             payload["description"] = description
    #
    #         response = requests.patch(url, headers=self.headers, json=payload, timeout=10)
    #         response.raise_for_status()
    #         result = response.json()
    #         logger.info(f"‚úÖ –ü–ª–∞—Ç—ñ–∂ {payment_id} –ª—ñ–¥–∞ {lead_id} –æ–Ω–æ–≤–ª–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å={status}")
    #         return result
    #     except requests.exceptions.RequestException as e:
    #         logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É {payment_id} –ª—ñ–¥–∞ {lead_id}: {e}")
    #         if hasattr(e, "response") and e.response is not None:
    #             logger.error(f"üîª –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
    #         return None
    #
    # def update_payment_status_direct(self, payment_id, status="paid", description=None):
    #     """–ü—Ä—è–º–∏–π PATCH –∑–∞–ø–∏—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–ª–∞—Ç–µ–∂—É"""
    #     url = f"{self.base_url}/payments/{payment_id}"
    #     try:
    #         payload = {"status": status}
    #         if description:
    #             payload["description"] = description
    #
    #         logger.info(f"üîÑ –ü—Ä—è–º–∏–π PUT –∑–∞–ø–∏—Ç –¥–æ {url} –∑ –¥–∞–Ω–∏–º–∏: {payload}")
    #         response = requests.put(url, headers=self.headers, json=payload, timeout=10)
    #
    #         logger.info(f"üì° –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.status_code}")
    #         logger.info(f"üì° –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
    #
    #         response.raise_for_status()
    #         result = response.json()
    #         logger.info(f"‚úÖ –ü–ª–∞—Ç—ñ–∂ {payment_id} –æ–Ω–æ–≤–ª–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å={status}")
    #         return result
    #     except requests.exceptions.RequestException as e:
    #         logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É {payment_id}: {e}")
    #         if hasattr(e, "response") and e.response is not None:
    #             logger.error(f"üîª –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
    #         return None

    def attach_external_transaction_by_id(self, payment_id, transaction_id):
        """
        –ü—Ä–∏–≤'—è–∑–∞—Ç–∏ –∑–æ–≤–Ω—ñ—à–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–æ –ø–ª–∞—Ç–µ–∂—É –∑–∞ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        https://docs.keycrm.app/#/Payments/attachExternalTransactionToPayment

        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂—É –≤ KeyCRM
            transaction_id: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ —Å–ø–∏—Å–∫—É –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        """
        url = f"{self.base_url}/payments/{payment_id}/external-transactions"
        try:
            payload = {"transaction_id": transaction_id}

            logger.info(f"üîÑ –ü—Ä–∏–≤'—è–∑—É—î–º–æ –∑–æ–≤–Ω—ñ—à–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é (ID: {transaction_id}) –¥–æ –ø–ª–∞—Ç–µ–∂—É {payment_id}")

            response = requests.post(url, headers=self.headers, json=payload, timeout=10)
            response.raise_for_status()

            result = response.json()
            logger.info(f"‚úÖ –ó–æ–≤–Ω—ñ—à–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é {transaction_id} –ø—Ä–∏–≤'—è–∑–∞–Ω–æ –¥–æ –ø–ª–∞—Ç–µ–∂—É {payment_id}")
            return result

        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤'—è–∑—Ü—ñ –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {e}")
            if hasattr(e, "response") and e.response is not None:
                logger.error(f"üîª –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            return None

    # def update_lead_status(self, lead_id, status_id, client_id=None):
    #     """–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ª—ñ–¥–∞ –≤ –≤–æ—Ä–æ–Ω—Ü—ñ"""
    #     url = f"{self.base_url}/pipelines/cards/{lead_id}"
    #     try:
    #         payload = {"status_id": status_id}
    #         if client_id:
    #             payload["client_id"] = client_id
    #
    #         logger.info(f"üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ª—ñ–¥–∞ {lead_id} –Ω–∞ {status_id} –∑ client_id: {client_id}")
    #         response = requests.put(url, headers=self.headers, json=payload, timeout=10)
    #         response.raise_for_status()
    #         result = response.json()
    #         logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ª—ñ–¥–∞ {lead_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {status_id}")
    #         return result
    #     except requests.exceptions.RequestException as e:
    #         logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –ª—ñ–¥–∞ {lead_id}: {e}")
    #         if hasattr(e, "response") and e.response is not None:
    #             logger.error(f"üîª –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
    #         return None

    # def update_payment_with_transaction(self, payment_id, order, wayforpay_data):
    #     """–û–Ω–æ–≤–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂ –∑ –∑–æ–≤–Ω—ñ—à–Ω—å–æ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—î—é (–ø–æ–≤–Ω–∏–π PUT –∑–∞–ø–∏—Ç)"""
    #     url = f"https://pasue.api.keycrm.app/finance/payments/{payment_id}"
    #     try:
    #         payload = {
    #             'destination_type': 'lead',
    #             'destination_id': order.keycrm_lead_id,
    #             'payment_id': payment_id,
    #             'payment_method_id': 6,  # WayForPay
    #             'status': 'paid',
    #             'actual_amount': float(order.amount),
    #             'description': f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.wayforpay_order_reference}. –ö–ª—ñ—î–Ω—Ç: {order.name}, {order.phone}, {order.email}. –¢–æ–≤–∞—Ä–∏: PASUE Club - Grand Opening Party Ticket",
    #             'transaction_uuid': order.wayforpay_order_reference,
    #             'gateway_transaction_id': wayforpay_data.get('authCode'),
    #             'gateway_id': 1,
    #             'currency_code': 'UAH',
    #             'payment_date': datetime.now().isoformat() + 'Z',
    #         }
    #
    #         logger.info(f"üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –ø–ª–∞—Ç—ñ–∂ {payment_id} –∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—î—é: {payload}")
    #         response = requests.put(url, headers=self.headers, json=payload, timeout=10)
    #         response.raise_for_status()
    #         result = response.json()
    #         logger.info(f"‚úÖ –ü–ª–∞—Ç—ñ–∂ {payment_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—î—é")
    #         return result
    #     except requests.exceptions.RequestException as e:
    #         logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É {payment_id}: {e}")
    #         if hasattr(e, "response") and e.response is not None:
    #             logger.error(f"üîª –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
    #         return None
